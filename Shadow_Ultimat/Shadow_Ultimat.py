from herokutl.types import Message
from .. import loader, utils
import requests
import importlib.util
import os
import sys

@loader.tds
class Shadow_Ultimat(loader.Module):
    """Shadow Ultimat Auto Farm Manager for @bfgbunker_bot"""
    strings = {
        "name": "Shadow_Ultimat",
        "version": "7.7.7",
        "author": "@familiarrrrrr",
        "sh_desc": "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ-—Ñ–µ—Ä–º—ã –¥–ª—è @bfgbunker_bot",
        "sh_status": "üìì | Shadow_Ultimat | ~ [ v{} ]\n‚ïî‚ïê‚ï£‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n‚ïë  üîª–°–¢–ê–¢–£–° |üí£| BFGBüîª\n‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n",
        "sh_people": "‚ïë~$ üë´ –õ—é–¥–∏: {}\n",
        "sh_bonus": "‚ïë~$ üéÅ –ë–æ–Ω—É—Å: {}\n",
        "sh_petrol": "‚ïë~$ üõ¢ –ë–µ–Ω–∑–∏–Ω: {}\n",
        "sh_greenhouse": "‚ïë~$ üå± –¢–µ–ø–ª–∏—Ü–∞: {}\n",
        "sh_wasteland": "‚ïë~$ üèú –ü—É—Å—Ç–æ—à—å: {}\n",
        "sh_garden": "‚ïë~$ üå≥ –°–∞–¥: {}\n",
        "sh_mine": "‚ïë~$ ‚õè –®–∞—Ö—Ç–∞: {}\n",
        "sh_guild": "‚ïë~$ üèõ –ì–∏–ª—å–¥–∏—è: {}\n",
        "sh_commands": "‚ïëüëÅ‚Äçüó® –ö–æ–º–∞–Ω–¥—ã:\n",
        "sh_cmd_template": "‚ï†‚ïê‚ï£<code>{}{}</code> - –≤–∫–ª/–≤—ã–∫–ª\n",
        "sh_footer": "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
        "shupdate_desc": "–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏",
        "up_to_date": "–£ –≤–∞—Å —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è! –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.",
        "new_version": "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: https://github.com/Nyashka17/Shadow_modules",
        "update_success": "–ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ –≤–µ—Ä—Å–∏–∏ 7.7.7. –ù–æ–≤–æ–µ: [—É–∫–∞–∂–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è], –£–±—Ä–∞–Ω–æ: [—É–∫–∞–∂–∏—Ç–µ —É–¥–∞–ª—ë–Ω–Ω–æ–µ].",
        "update_loading": "–ó–∞–≥—Ä—É–∂–∞—é –ø–æ–¥–º–æ–¥—É–ª–∏ —Å GitHub...",
        "pref_desc": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å",
        "pref_updated": "üíª –í–∞—à –ø—Ä–µ—Ñ–∏–∫—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö –Ω–∞ {}"
    }
    strings_ru = strings

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue("version", "7.7.7", "Current module version", validator=loader.validators.String()),
            loader.ConfigValue("prefix", ".", "Current command prefix", validator=loader.validators.String()),
        )
        self.statuses = {
            "people": False,
            "bonus": False,
            "petrol": False,
            "greenhouse": False,
            "wasteland": False,
            "garden": False,
            "mine": False,
            "guild": False
        }
        self._db.set("statuses", self.statuses)
        if not self._db.get("prefix", None):
            self._db.set("prefix", self.config["prefix"])

    def get_prefix(self):
        return self._db.get("prefix", ".")

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ-—Ñ–µ—Ä–º—ã –¥–ª—è @bfgbunker_bot")
    async def sh(self, message: Message):
        """Show auto-farm status for @bfgbunker_bot"""
        statuses = self._db.get("statuses", self.statuses)
        prefix = self.get_prefix()
        status_msg = self.strings["sh_status"].format(self.strings["version"])
        for key, value in statuses.items():
            status_msg += self.strings[f"sh_{key}"].format("‚úÖ" if value else "‚õîÔ∏è")
        status_msg += self.strings["sh_commands"]
        for cmd in ["–ª—é–¥–∏", "–±–æ–Ω—É—Å", "–±–µ–Ω–∑–∏–Ω", "—Ç–µ–ø–ª–∏—Ü–∞", "–ø—É—Å—Ç–æ—à—å", "—Å–∞–¥", "—à–∞—Ö—Ç–∞", "–≥–∏–ª—å–¥–∏—è"]:
            status_msg += self.strings["sh_cmd_template"].format(prefix, cmd)
        status_msg += self.strings["sh_footer"]
        await utils.answer(message, status_msg)

    @loader.command(ru_doc="–í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ-—Ñ–µ—Ä–º—É –¥–ª—è –ª—é–¥–µ–π –≤ @bfgbunker_bot")
    async def –ª—é–¥–∏(self, message: Message):
        """Toggle people auto-farm for @bfgbunker_bot"""
        self._toggle_status("people", message)
    # ... (other toggle commands remain the same, e.g., –±–æ–Ω—É—Å, –±–µ–Ω–∑–∏–Ω, etc.)

    def _toggle_status(self, key, message):
        statuses = self._db.get("statuses", self.statuses)
        statuses[key] = not statuses[key]
        self._db.set("statuses", statuses)
        await utils.answer(message, f"–ê–≤—Ç–æ-—Ñ–µ—Ä–º–∞ –¥–ª—è {key} –≤ @bfgbunker_bot —Ç–µ–ø–µ—Ä—å {'–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ' if statuses[key] else '–≤—ã–∫–ª—é—á–µ–Ω–∞ ‚õîÔ∏è'}")

    @loader.command(ru_doc="–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏")
    async def shupdate(self, message: Message):
        """Update all modules to the latest version for @bfgbunker_bot"""
        await utils.answer(message, self.strings["update_loading"])
        current_version = self.config["version"]
        module_urls = [
            "https://raw.githubusercontent.com/Nyashka17/Shadow_modules/refs/heads/main/Shadow_Ultimat/Shadow_Ultimat.py",
            "https://raw.githubusercontent.com/Nyashka17/Shadow_modules/refs/heads/main/Shadow_Ultimat/Shadow_Ultimat_auto_Bonus.py",
            "https://raw.githubusercontent.com/Nyashka17/Shadow_modules/refs/heads/main/Shadow_Ultimat/Shadow_Ultimat_auto_Garden.py",
            "https://raw.githubusercontent.com/Nyashka17/Shadow_modules/refs/heads/main/Shadow_Ultimat/Shadow_Ultimat_auto_Greenhouse.py",
            "https://raw.githubusercontent.com/Nyashka17/Shadow_modules/refs/heads/main/Shadow_Ultimat/Shadow_Ultimat_auto_Guild.py",
            "https://raw.githubusercontent.com/Nyashka17/Shadow_modules/refs/heads/main/Shadow_Ultimat/Shadow_Ultimat_auto_Mine.py",
            "https://raw.githubusercontent.com/Nyashka17/Shadow_modules/refs/heads/main/Shadow_Ultimat/Shadow_Ultimat_auto_People.py",
            "https://raw.githubusercontent.com/Nyashka17/Shadow_modules/refs/heads/main/Shadow_Ultimat/Shadow_Ultimat_auto_Petrol.py",
            "https://raw.githubusercontent.com/Nyashka17/Shadow_modules/refs/heads/main/Shadow_Ultimat/Shadow_Ultimat_auto_Wasteland.py",
            "https://raw.githubusercontent.com/Nyashka17/Shadow_modules/refs/heads/main/Shadow_Ultimat/Shadow_Ultimat_state_Guild.py",
            "https://raw.githubusercontent.com/Nyashka17/Shadow_modules/refs/heads/main/Shadow_Ultimat/Shadow_Ultimat_state_People.py",
            "https://raw.githubusercontent.com/Nyashka17/Shadow_modules/refs/heads/main/Shadow_Ultimat/Shadow_Ultimat_state_Profile.py",
            "https://raw.githubusercontent.com/Nyashka17/Shadow_modules/refs/heads/main/Shadow_Ultimat/Shadow_Ultimat_update.py"
        ]

        module_dir = os.path.dirname(__file__) or "."
        for url in module_urls:
            filename = os.path.join(module_dir, url.split("/")[-1])
            response = requests.get(url)
            with open(filename, "wb") as f:
                f.write(response.content)

        def reload_module(module_name, file_path):
            spec = importlib.util.spec_from_file_location(module_name, file_path)
            module = importlib.util.module_from_spec(spec)
            sys.modules[module_name] = module
            spec.loader.exec_module(module)
            return module

        reload_module("Shadow_Ultimat", os.path.join(module_dir, "Shadow_Ultimat.py"))
        sub_modules = [f"Shadow_Ultimat_{part}" for part in [
            "auto_Bonus", "auto_Garden", "auto_Greenhouse", "auto_Guild",
            "auto_Mine", "auto_People", "auto_Petrol", "auto_Wasteland",
            "state_Guild", "state_People", "state_Profile", "update"
        ]]
        for sub in sub_modules:
            sub_file = os.path.join(module_dir, f"{sub}.py")
            if os.path.exists(sub_file):
                reload_module(sub, sub_file)

        self.config["version"] = "7.7.7"  # Update with actual version if parsed
        await utils.answer(message, self.strings["update_success"])

    @loader.command(ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å")
    async def pref(self, message: Message):
        """Set a new command prefix"""
        args = utils.get_args(message)
        if not args or len(args) != 1:
            await utils.answer(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .pref <–ø—Ä–µ—Ñ–∏–∫—Å>")
            return
        new_prefix = args[0]
        self._db.set("prefix", new_prefix)
        await utils.answer(message, self.strings["pref_updated"].format(new_prefix))

    def get_prefix(self):
        return self._db.get("prefix", ".")
